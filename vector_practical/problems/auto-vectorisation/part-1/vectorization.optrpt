Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/2=50.0%] vectorization.cpp(21,12)
  -> EXTERN: (27,23) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (28,23) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (29,23) _mm_malloc(unsigned long long, unsigned long long)
  -> (35,3) vadd(float *, float *, float *, int) (isz = 19) (sz = 30)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (39,5) printf(const char *, ...)
  -> EXTERN: (41,3) free(void *)
  -> EXTERN: (42,3) free(void *)
  -> EXTERN: (43,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vectorization.cpp(32,3)
   remark #15388: vectorization support: reference B has aligned access   [ vectorization.cpp(33,10) ]
   remark #15388: vectorization support: reference A has aligned access   [ vectorization.cpp(33,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 12 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 4.780 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=32
LOOP END

LOOP BEGIN at vectorization.cpp(38,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ vectorization.cpp(39,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: vadd(float *, float *, float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vadd(float *, float *, float *, int)) [2/2=100.0%] vectorization.cpp(14,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vectorization.cpp(15,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at vectorization.cpp(15,5)
   remark #15388: vectorization support: reference C has aligned access   [ vectorization.cpp(17,9) ]
   remark #15389: vectorization support: reference A has unaligned access   [ vectorization.cpp(17,9) ]
   remark #15388: vectorization support: reference B has aligned access   [ vectorization.cpp(17,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.417
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 6.530 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at vectorization.cpp(15,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at vectorization.cpp(15,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C has aligned access   [ vectorization.cpp(17,9) ]
   remark #15389: vectorization support: reference A has unaligned access   [ vectorization.cpp(17,9) ]
   remark #15389: vectorization support: reference B has unaligned access   [ vectorization.cpp(17,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.231
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at vectorization.cpp(15,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

