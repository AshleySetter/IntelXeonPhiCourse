
    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/2=50.0%] vectorization.cpp(16,11)
  -> EXTERN: (20,19) _mm_malloc(unsigned long, unsigned long)
  -> EXTERN: (21,19) _mm_malloc(unsigned long, unsigned long)
  -> (29,12) my_simple_add(int, int) (isz = 0) (sz = 7)
     [[ Unable to inline callsite  <1>]]
  -> EXTERN: (33,5) printf(const char *, ...)
  -> EXTERN: (35,3) _mm_free(void *)
  -> EXTERN: (36,3) _mm_free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vectorization.cpp(24,3)
   remark #15388: vectorization support: reference B has aligned access   [ vectorization.cpp(25,10) ]
   remark #15388: vectorization support: reference A has aligned access   [ vectorization.cpp(25,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 4.650 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=32
LOOP END

LOOP BEGIN at vectorization.cpp(28,3)
   remark #15382: vectorization support: call to function _Z13my_simple_addii cannot be vectorized   [ vectorization.cpp(29,12) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at vectorization.cpp(32,3)
   remark #15382: vectorization support: call to function printf cannot be vectorized   [ vectorization.cpp(33,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: my_simple_add(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (my_simple_add(int, int)) [2/2=100.0%] vectorization.cpp(12,55)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

